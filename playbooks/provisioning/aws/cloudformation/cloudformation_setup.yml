# vim: set ft=ansible:
---
- name: 'Bootstrapping or Refreshing Environment'
  hosts: localhost
  connection: local
  sudo: no
  gather_facts: no
  vars_files:
  - vars.yml
  vars:
    vpc_subnet_azs: "{{ lookup('ec2_zones_by_region', ec2_region) }}"
    r53_subdomain: "{{ cluster_id }}.{{ env_id }}.{{ r53_zone }}"
  tasks:
  - name: 'Validating options'
    fail:
      msg: required values not set
    when: >
      cluster_id is not defined
      or env_id is not defined
      or r53_zone is not defined

  - name: Launch the CloudFormation Template
    cloudformation:
      region: "{{ ec2_region }}"
      stack_name: openshift-{{ cluster_id }}-{{ env_id }}
      state: present
      tags:
        environment: "{{ env_id }}"
        clusterid: "{{ cluster_id }}"
      template: "{{ cloudformation_template | default('files/cloudformation.json') }}"
      template_parameters:
        Route53HostedZone: "{{ r53_zone }}."
        MasterApiPort: "{{ api_port }}"
        MasterHealthTarget: "TCP:{{ api_port }}"
        MasterClusterHostname: openshift.internal.{{ r53_subdomain }}
        MasterClusterPublicHostname: openshift.{{ r53_subdomain }}
        AppWildcardDomain: "*.apps.{{ r53_subdomain }}"
        SshSgId: "{{ sg_ssh | default('sg-5875023f') }}"
        EtcdSgId: "{{ sg_etcd | default('sg-5875023f') }}"
        MasterExtElbSgId: "{{ sg_masterextelb | default('sg-5875023f') }}"
        MasterIntElbSgId: "{{ sg_masterintelb | default('sg-5875023f') }}"
        InfraElbSgId: "{{ sg_infraelb | default('sg-5875023f') }}"
        InfraSgId: "{{ sg_infra | default('sg-5875023f') }}"
        NodeSgId: "{{ sg_node | default('sg-5875023f') }}"
        MasterSgId: "{{ sg_master | default('sg-5875023f') }}"
        Subnets: "{{ subnets | default('subnet-cf57c596') }}"
        SubnetAvailabilityZones: "{{ subnetavailabilityzones | default('us-east-1d') }}"
        #SubnetAvailabilityZones: "{{ vpc_subnet_azs }}"
        KeyName: "{{ keyname | default('libra') }}"
        NumMasters: "{{ masters.count }}"
        MasterInstanceType: "{{ masters.instance_type }}"
        MasterImageId: "{{ ec2_image }}"
        NumInfra: "{{ infra_nodes.count }}"
        InfraInstanceType: "{{ infra_nodes.instance_type }}"
        InfraImageId: "{{ ec2_image }}"
        NumNodes: "{{ app_nodes.count }}"
        NodeInstanceType: "{{ app_nodes.instance_type }}"
        NodeImageId: "{{ ec2_image }}"
    register: cf_output

  - meta: refresh_inventory
